{
  "_args": [
    [
      {
        "raw": "lusca@^1.5.2",
        "scope": null,
        "escapedName": "lusca",
        "name": "lusca",
        "rawSpec": "^1.5.2",
        "spec": ">=1.5.2 <2.0.0",
        "type": "range"
      },
      "/Users/Manu/KIT/MicrosoftInnovationHack2018"
    ]
  ],
  "_from": "lusca@>=1.5.2 <2.0.0",
  "_id": "lusca@1.5.2",
  "_inCache": true,
  "_location": "/lusca",
  "_nodeVersion": "4.4.4",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/lusca-1.5.2.tgz_1507055357473_0.8319427622482181"
  },
  "_npmUser": {
    "name": "lrace",
    "email": "link.race@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "lusca@^1.5.2",
    "scope": null,
    "escapedName": "lusca",
    "name": "lusca",
    "rawSpec": "^1.5.2",
    "spec": ">=1.5.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/lusca/-/lusca-1.5.2.tgz",
  "_shasum": "5230a0c635fb60c1f30efbd0d95341bca3ed788e",
  "_shrinkwrap": null,
  "_spec": "lusca@^1.5.2",
  "_where": "/Users/Manu/KIT/MicrosoftInnovationHack2018",
  "author": {
    "name": "Jeff Harrell",
    "email": "jeharrell@paypal.com"
  },
  "bugs": {
    "url": "https://github.com/krakenjs/lusca/issues"
  },
  "dependencies": {
    "tsscmp": "^1.0.5"
  },
  "description": "Application security for express.",
  "devDependencies": {
    "body-parser": "^1.6.3",
    "cookie-parser": "^1.3.2",
    "cookie-session": "^1.0.2",
    "data-driven": "^1.0.0",
    "errorhandler": "^1.1.1",
    "express": "^4.3.8",
    "express-session": "^1.7.5",
    "grunt": "^0.4.5",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-jshint": "^0.7.0",
    "grunt-mocha-test": "^0.7.0",
    "jshint": "*",
    "supertest": "^0.13.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-E3UQSLC2cJgHPcUr4gXoz2EDB2Y4G3wdww6A6vbulPySkM5+bBlTqK+wwRA17f0+xDuNDJdsiTDykblFk6YfJA==",
    "shasum": "5230a0c635fb60c1f30efbd0d95341bca3ed788e",
    "tarball": "https://registry.npmjs.org/lusca/-/lusca-1.5.2.tgz"
  },
  "engineStrict": true,
  "engines": {
    "node": ">=0.8.x"
  },
  "gitHead": "09bebb4a104ef4661750f549a2d7bdff65e9a15f",
  "homepage": "https://github.com/krakenjs/lusca#readme",
  "licenses": [
    {
      "type": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  ],
  "main": "index",
  "maintainers": [
    {
      "name": "lrace",
      "email": "link.race@gmail.com"
    },
    {
      "name": "jeffharrell",
      "email": "jeff@juxtadesign.com"
    },
    {
      "name": "pvenkatakrishnan",
      "email": "poo.leo@gmail.com"
    },
    {
      "name": "grawk",
      "email": "mattedelman@gmail.com"
    },
    {
      "name": "totherik",
      "email": "totherik@gmail.com"
    },
    {
      "name": "jasisk",
      "email": "jasisk@gmail.com"
    }
  ],
  "name": "lusca",
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "https://registry.npmjs.org"
  },
  "readme": "# lusca\n\n[![Build Status](https://travis-ci.org/krakenjs/lusca.svg?branch=master)](https://travis-ci.org/krakenjs/lusca) [![NPM version](https://badge.fury.io/js/lusca.svg)](http://badge.fury.io/js/lusca)  \n\nWeb application security middleware.\n\n\n## Usage\n\n```js\nvar express = require('express'),\n\tapp = express(),\n\tsession = require('express-session'),\n\tlusca = require('lusca');\n\n//this or other session management will be required\napp.use(session({\n\tsecret: 'abc',\n\tresave: true,\n\tsaveUninitialized: true\n}));\n\napp.use(lusca({\n    csrf: true,\n    csp: { /* ... */},\n    xframe: 'SAMEORIGIN',\n    p3p: 'ABCDEF',\n    hsts: {maxAge: 31536000, includeSubDomains: true, preload: true},\n    xssProtection: true,\n    nosniff: true,\n    referrerPolicy: 'same-origin'\n}));\n```\n\nSetting any value to `false` will disable it. Alternately, you can opt into methods one by one:\n\n```js\napp.use(lusca.csrf());\napp.use(lusca.csp({ /* ... */}));\napp.use(lusca.xframe('SAMEORIGIN'));\napp.use(lusca.p3p('ABCDEF'));\napp.use(lusca.hsts({ maxAge: 31536000 }));\napp.use(lusca.xssProtection(true));\napp.use(lusca.nosniff());\napp.use(lusca.referrerPolicy('same-origin'));\n```\n\n__Please note that you must use [express-session](https://github.com/expressjs/session), [cookie-session](https://github.com/expressjs/cookie-session), their express 3.x alternatives, or other session object management in order to use lusca.__\n\n\n## API\n\n\n### lusca.csrf(options)\n\n* `key` String - Optional. The name of the CSRF token added to the model. Defaults to `_csrf`.\n* `secret` String - Optional. The key to place on the session object which maps to the server side token. Defaults to `_csrfSecret`.\n* `impl` Function - Optional. Custom implementation to generate a token.\n* `cookie` String|Object - Optional. If set, a cookie with the name and/or options you provide will be set with the CSRF token. If the value is a string, it'll be used as the cookie name.\n* `cookie.name` String - Required if cookie is an object and `angular` is not true. The CSRF cookie name to set.\n* `cookie.options` Object - Optional. A valid Express cookie options object.\n* `angular` Boolean - Optional. Shorthand setting to set `lusca` up to use the default settings for CSRF validation according to the [AngularJS docs]. Can be used with `cookie.options`.\n\n[angularjs docs]: https://docs.angularjs.org/api/ng/service/$http#cross-site-request-forgery-xsrf-protection\n\nEnables [Cross Site Request Forgery](https://www.owasp.org/index.php/Cross-Site_Request_Forgery_\\(CSRF\\)) (CSRF) headers.\n\nIf enabled, the CSRF token must be in the payload when modifying data or you will receive a *403 Forbidden*. To send the token you'll need to echo back the `_csrf` value you received from the previous request.\n\nFurthermore, parsers must be registered before lusca.\n\n### lusca.csp(options)\n\n* `options.policy` String, Object, or an Array - Object definition of policy. Valid policies examples include:\n  * `{\"default-src\": \"*\"}`\n  * `\"referrer no-referrer\"`\n  * `[{ \"img-src\": \"'self' http:\" }, \"block-all-mixed-content\"]`\n* `options.reportOnly` Boolean - Enable report only mode.\n* `options.reportUri` String - URI where to send the report data\n* `options.styleNonce` Boolean - Enable nonce for inline style-src, access from `req.locals.nonce`\n* `options.scriptNonce` Boolean - Enable nonce for inline script-src, access from `req.locals.nonce`\n\nEnables [Content Security Policy](https://www.owasp.org/index.php/Content_Security_Policy) (CSP) headers.\n\n#### Example Options\n\n```js\n// Everything but images can only come from own domain (excluding subdomains)\n{\n  policy: {\n    'default-src': '\\'self\\'',\n    'img-src': '*'\n  }\n}\n```\n\nSee the [MDN CSP usage](https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Using_Content_Security_Policy) page for more information on available policy options.\n\n### lusca.xframe(value)\n\n* `value` String - Required. The value for the header, e.g. DENY, SAMEORIGIN or ALLOW-FROM uri.\n\nEnables X-FRAME-OPTIONS headers to help prevent [Clickjacking](https://www.owasp.org/index.php/Clickjacking).\n\n\n\n### lusca.p3p(value)\n\n* `value` String - Required. The compact privacy policy.\n\nEnables [Platform for Privacy Preferences Project](http://support.microsoft.com/kb/290333) (P3P) headers.\n\n\n\n### lusca.hsts(options)\n\n* `options.maxAge` Number - Required. Number of seconds HSTS is in effect.\n* `options.includeSubDomains` Boolean - Optional. Applies HSTS to all subdomains of the host\n* `options.preload` Boolean - Optional. Adds preload flag\n\nEnables [HTTP Strict Transport Security](https://www.owasp.org/index.php/HTTP_Strict_Transport_Security) for the host domain. The preload flag is required for HSTS domain submissions to [Chrome's HSTS preload list](https://hstspreload.appspot.com).\n\n\n### lusca.xssProtection(options)\n\n* `options.enabled` Boolean - Optional. If the header is enabled or not (see header docs). Defaults to `1`.\n* `options.mode` String - Optional. Mode to set on the header (see header docs). Defaults to `block`.\n\nEnables [X-XSS-Protection](http://blogs.msdn.com/b/ie/archive/2008/07/02/ie8-security-part-iv-the-xss-filter.aspx) headers to help prevent cross site scripting (XSS) attacks in older IE browsers (IE8)\n\n\n### lusca.nosniff()\n\nEnables [X-Content-Type-Options](https://blogs.msdn.microsoft.com/ie/2008/09/02/ie8-security-part-vi-beta-2-update/) header to prevent MIME-sniffing a response away from the declared content-type.\n\n\n### lusca.referrerPolicy(value)\n\n* `value` String - Optional. The value for the header, e.g. `origin`, `same-origin`, `no-referrer`. Defaults to `` (empty string).\n\nEnables [Referrer-Policy](https://www.w3.org/TR/referrer-policy/#intro) header to control the Referer header.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/krakenjs/lusca.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "1.5.2"
}
